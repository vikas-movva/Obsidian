{"path":".obsidian/plugins/text-extractor/cache/61463dd9e6c311a117b9410e4c277cdf.json","text":"Chapter 3 – Agile Software Development 11/18/2023 Topics covered  Agile methods  Agile development techniques  Agile project management  Scaling agile methods 21/18/2023 Rapid software development  Rapid development and delivery is now often the most important requirement for software systems ▪ Businesses operate in a fast –changing requirement and it is practically impossible to produce a set of stable software requirements ▪ Software has to evolve quickly to reflect changing business needs.  Plan-driven development is essential for some types of system but does not meet these business needs.  Agile development methods emerged in the late 1990s whose aim was to radically reduce the delivery time for working software systems 31/18/2023 Agile development  Program specification, design and implementation are inter-leaved  The system is developed as a series of versions or increments with stakeholders involved in version specification and evaluation  Frequent delivery of new versions for evaluation  Extensive tool support (e.g. automated testing tools) used to support development.  Minimal documentation – focus on working code 41/18/2023 Plan-driven and agile development 51/18/2023 Plan-driven and agile development  Plan-driven development ▪ A plan-driven approach to software engineering is based around separate development stages with the outputs to be produced at each of these stages planned in advance. ▪ Not necessarily waterfall model – plan-driven, incremental development is possible ▪ Iteration occurs within activities.  Agile development ▪ Specification, design, implementation and testing are inter- leaved and the outputs from the development process are decided through a process of negotiation during the software development process. 61/18/2023 Agile methods 71/18/2023 Agile methods  Dissatisfaction with the overheads involved in software design methods of the 1980s and 1990s led to the creation of agile methods. These methods: ▪ Focus on the code rather than the design ▪ Are based on an iterative approach to software development ▪ Are intended to deliver working software quickly and evolve this quickly to meet changing requirements.  The aim of agile methods is to reduce overheads in the software process (e.g. by limiting documentation) and to be able to respond quickly to changing requirements without excessive rework. 81/18/2023 Agile manifesto  We are uncovering better ways of developing  software by doing it and helping others do it.  Through this work we have come to value: ▪ Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan  That is, while there is value in the items on  the right, we value the items on the left more. 91/18/2023 The principles of agile methods 10 Principle Description Customer involvement Customers should be closely involved throughout the development process. Their role is provide and prioritize new system requirements and to evaluate the iterations of the system. Incremental delivery The software is developed in increments with the customer specifying the requirements to be included in each increment. People not process The skills of the development team should be recognized and exploited. Team members should be left to develop their own ways of working without prescriptive processes. Embrace change Expect the system requirements to change and so design the system to accommodate these changes. Maintain simplicity Focus on simplicity in both the software being developed and in the development process. Wherever possible, actively work to eliminate complexity from the system. 1/18/2023 Agile method applicability  Product development where a software company is developing a small or medium-sized product for sale. ▪ Virtually all software products and apps are now developed using an agile approach  Custom system development within an organization, where there is a clear commitment from the customer to become involved in the development process and where there are few external rules and regulations that affect the software. 111/18/2023 Agile development techniques 121/18/2023 Scrum  Scrum is an agile method that focuses on managing iterative development rather than specific agile practices.  There are three phases in Scrum. ▪ The initial phase is an outline planning phase where you establish the general objectives for the project and design the software architecture. ▪ This is followed by a series of sprint cycles, where each cycle develops an increment of the system. ▪ The project closure phase wraps up the project, completes required documentation such as system help frames and user manuals and assesses the lessons learned from the project.  131/18/2023 Scrum terminology (a) Scrum term Definition Development team A self-organizing group of software developers, which should be no more than 7 people. They are responsible for developing the software and other essential project documents. Potentially shippable product increment The software increment that is delivered from a sprint. The idea is that this should be ‘potentially shippable’ which means that it is in a finished state and no further work, such as testing, is needed to incorporate it into the final product. In practice, this is not always achievable. Product backlog This is a list of ‘to do’ items which the Scrum team must tackle. They may be feature definitions for the software, software requirements, user stories or descriptions of supplementary tasks that are needed, such as architecture definition or user documentation. Product owner An individual (or possibly a small group) whose job is to identify product features or requirements, prioritize these for development and continuously review the product backlog to ensure that the project continues to meet critical business needs. The Product Owner can be a customer but might also be a product manager in a software company or other stakeholder representative. 141/18/2023 Scrum terminology (b) Scrum term Definition Scrum A daily meeting of the Scrum team that reviews progress and prioritizes work to be done that day. Ideally, this should be a short face-to-face meeting that includes the whole team. ScrumMaster The ScrumMaster is responsible for ensuring that the Scrum process is followed and guides the team in the effective use of Scrum. He or she is responsible for interfacing with the rest of the company and for ensuring that the Scrum team is not diverted by outside interference. The Scrum developers are adamant that the ScrumMaster should not be thought of as a project manager. Others, however, may not always find it easy to see the difference. Sprint A development iteration. Sprints are usually 2-4 weeks long. Velocity An estimate of how much product backlog effort that a team can cover in a single sprint. Understanding a team’s velocity helps them estimate what can be covered in a sprint and provides a basis for measuring improving performance. 151/18/2023 Scrum sprint cycle 161/18/2023 Scrum framework •Product owner •ScrumMaster •Team Roles •Sprint planning •Sprint review •Sprint retrospective •Daily scrum meeting Meetings •Product backlog •Sprint backlog •Burndown charts Components Product owner manager  Define the features of the product specification  Decide on release date and content 14-Dec  Be responsible for the profitability of the product (ROI) which 335 need not do  Prioritize features according to market value what you’re supposed to learn in 335  Adjust features and priority every iteration, as needed not in 335  Accept or reject work results or grade the projects The ScrumMaster Rick and SLs, sort of Represents management UofA to the project Responsible for enacting Scrum values and practices summarized in grading criteria, schedule, meetings Removes impediments respond if things are getting in the way Ensure that the team is fully functional and productive summarized in grading criteria, schedule, meetings Enable close cooperation across all roles and functions meetings Shield the team from external interferences we’re not asking for more than 66 hours over 6 weeks The team Typically 5-9 people four or 3 Cross-functional: ▪ Programmers, testers, user experience designers, etc. If this is the case, it was by luck The Sprint cycle  Once these are agreed, the team organize themselves to develop the software.  During this stage the team is isolated from the customer and the organization, with all communications channelled through the so-called ‘Scrum master’.  The role of the Scrum master is to protect the development team from external distractions.  At the end of the sprint, the work done is reviewed and presented to stakeholders. The next sprint cycle then begins. 211/18/2023 The Scrum sprint cycle  Sprints are fixed length, normally 2–4 weeks.  The starting point for planning is the product backlog, which is the list of work to be done on the project.  The selection phase involves all of the project team who work with the customer to select the features and functionality from the product backlog to be developed during the sprint. 221/18/2023 Putting it all togetherThe Daily Scrum  At start of day team meetings  Time Boxed: n minutes  Stand-up: to keep it short  Not for problem solving, which comes later ▪ Whole world is invited PM and team only ▪ Only team members, ScrumMaster, product owner, can talk  Helps avoid other unnecessary meetings Sprint planning meeting Sprint prioritization • Analyze and evaluate product backlog • Select sprint goal Sprint planning • Decide how to achieve sprint goal (design) • Create sprint backlog (tasks) from product backlog items (user stories / features) • Estimate sprint backlog in hours Sprint goal Sprint backlog Business condition s Team capacity Product backlog Technolo gy Current product The daily scrum • Daily • 15-minutes • Stand-up • Not for problem solving • Whole world is invited • Only team members, Scrum Master, product owner talk • Helps avoid other unnecessary meetings Everyone answers 3 questions  not status for the ScrumMaster  commitments in front of peers What did you do yesterday? 1 What will you do today? 2 Is anything in your way? 3 A sample product backlog Backlog item Estimate Allow a guest to make a reservation 3 As a guest, I want to cancel a reservation. 5 As a guest, I want to change the dates of a reservation. 3 As a hotel employee, I can run RevPAR reports (revenue- per-available-room) 8 Improve exception handling 8 ... 30 ... 50 Burn down charts are a graphical representation of work left to do versus time. Iteration Burndown Chart Ideal completion rate Story Points remainingStory Points Sprint Project Burndown ChartTeamwork in Scrum  The ‘Scrum master’ is a facilitator who arranges daily meetings, tracks the backlog of work to be done, records decisions, measures progress against the backlog and communicates with customers and management outside of the team.  The whole team attends short daily meetings (Scrums) where all team members share information, describe their progress since the last meeting, problems that have arisen and what is planned for the following day. ▪ This means that everyone on the team knows what is going on and, if problems arise, can re-plan short-term work to cope with them. 311/18/2023 Scrum benefits  The product is broken down into a set of manageable and understandable chunks.  Unstable requirements do not hold up progress.  The whole team have visibility of everything and consequently team communication is improved.  Customers see on-time delivery of increments and gain feedback on how the product works.  Trust between customers and developers is established and a positive culture is created in which everyone expects the project to succeed. 321/18/2023 Distributed Scrum 331/18/2023 Extreme programming  A very influential agile method, developed in the late 1990s, that introduced a range of agile development techniques.  Extreme Programming (XP) takes an ‘extreme’ approach to iterative development. ▪ New versions may be built several times per day; ▪ Increments are delivered to customers every 2 weeks; ▪ All tests must be run for every build and the build is only accepted if tests run successfully. 341/18/2023 The extreme programming release cycle 351/18/2023 Extreme programming practices (a) 36 Principle or practice Description Incremental planning Requirements are recorded on story cards and the stories to be included in a release are determined by the time available and their relative priority. The developers break these stories into development ‘Tasks’. Small releases The minimal useful set of functionality that provides business value is developed first. Releases of the system are frequent and incrementally add functionality to the first release. System Metaphor Guide all development with a simple shared story of how the whole system works. Simple design Enough design is carried out to meet the current requirements and no more. Test-first development An automated unit test framework is used to write tests for a new piece of functionality before that functionality itself is implemented. Refactoring All developers are expected to refactor the code continuously as soon as possible code improvements are found. This keeps the code simple and maintainable. 1/18/2023 Extreme programming practices (b) 37 Pair programming Developers work in pairs, checking each other’s work and providing the support to always do a good job. Collective ownership The pairs of developers work on all areas of the system, so that no islands of expertise develop and all the developers take responsibility for all of the code. Anyone can change anything. Continuous integration As soon as the work on a task is complete, it is integrated into the whole system. After any such integration, all the unit tests in the system must pass. Sustainable pace Large amounts of overtime are not considered acceptable as the net effect is often to reduce code quality and medium term productivity On-site customer A representative of the end-user of the system (the customer) should be available full time for the use of the XP team. In an extreme programming process, the customer is a member of the development team and is responsible for bringing system requirements to the team for implementation. Coding Standards Programmers write all code in accordance with rules emphasizing communication throughout the code. Values of Extreme Programming Joey Paquet, 2006-2017 38 SOEN 6441 - Advanced Programming Practices • Communication • Simplicity • Feedback • Courage • Respect • Embracing change  Building software systems requires: ▪ communicating system requirements to the developers of the system, ▪ communicating the software interfaces (APIs) to fellow developers.  In formal software development methodologies, this task is accomplished through documentation.  Extreme programming techniques can be viewed as methods for efficiently building and disseminating institutional knowledge among members of a development team.  The goal is to give all developers a shared view of the system which matches the view held by the users of the system.  To this end, extreme programming favors simple designs, common metaphors, collaboration of users and programmers, frequent verbal communication, and feedback.  During coding, automated code documentation generation tools (e.g. Doxygen, Javadoc) can be used to facilitate communication between developers. Communication Joey Paquet, 2006-2017 39 SOEN 6441 - Advanced Programming Practices  Extreme programming encourages starting with the simplest solution. Extra functionality can then be added later.  The difference between this approach and more conventional system development methods is the focus on designing and coding for the needs of today instead of those of tomorrow, next week, or next month.  Often summed up as the \"You aren't gonna need it\" (YAGNI) approach.  Coding and designing for uncertain future requirements implies the risk of spending resources on something that might not be needed, while perhaps delaying crucial features that are needed now.  A simple design with very simple and neat code could be easily understood by most programmers in the team.  When many little steps are made, the customer and the developers have more control and feedback over the development process and the system that is being developed. Simplicity Joey Paquet, 2006-2017 40 SOEN 6441 - Advanced Programming Practices  Feedback from the system: by writing unit tests, or running periodic integration tests, the programmers have direct feedback from the state of the system after implementing changes.  Feedback from the customer: The functional tests are provided by the customer and the testers. They will get concrete feedback about the current state of their system. This review is planned once in every two or three weeks during the delivery of each build so the customer can easily steer the development.  Feedback from the team: When customers come up with new requirements in the planning game the team directly gives an estimation of the time that it will take to implement.  Feedback is closely related to communication and simplicity.  Flaws in the system are easily communicated by writing a unit test that proves a certain piece of code will break.  The direct feedback from the system tells programmers to recode this part.  A customer is able to test the system periodically according to the functional requirements, simplified as user stories. Feedback Joey Paquet, 2006-2017 41 SOEN 6441 - Advanced Programming Practices  Several XP practices require courage. One is to always design and code for today and not for tomorrow. This is an effort to avoid getting bogged down in overly complicated design and concentrate on what is required now.  Courage enables developers to feel comfortable with refactoring their code when necessary. This means reviewing the existing system and modifying it so that future changes can be implemented more easily.  Continuous integration forces all individuals to confront their own code with the main body of code, which might uncover design flaws or omissions.  Pair programming forces individuals to uncover their lack of knowledge or erroneous code to tier peers as they are working in pairs.  Courage is required when code needs to be thrown away: courage to remove source code that is obsolete, no matter how much effort was used to write it. Courage Joey Paquet, 2006-2017 42 SOEN 6441 - Advanced Programming Practices  The respect value includes respect for others as well as self-respect.  Programmers should never commit changes that break compilation, that make existing unit-tests fail, or that otherwise delay the work of their peers.  Members respect their own work by always striving for high quality and seeking for the best design for the solution at hand through refactoring, and to follow coding standards.  Adopting good values leads to respect gained from others in the team. Nobody on the team should feel unappreciated or ignored if they embrace the values common to the team.  This ensures a high level of motivation and encourages loyalty toward the team and toward the goal of the project.  This value is very dependent upon the other values, and is very much oriented toward people in a team. Respect Joey Paquet, 2006-2017 43 SOEN 6441 - Advanced Programming Practices  The principle of embracing change is about not working against changes but embracing them.  For instance, if at one of the iterative meetings it appears that the customer's requirements have changed dramatically, programmers are to embrace this and plan the new requirements for the next iteration.  If the design of the system shows significant flaws that are hampering further development, its change should be embraced through redesign and refactoring.  When encountering unit testing failures or integration problems, one should see this as an opportunity to improve the system. Embracing change Joey Paquet, 2006-2017 44 SOEN 6441 - Advanced Programming Practices XP and agile principles  Incremental development is supported through small, frequent system releases.  Customer involvement means full-time customer engagement with the team.  People not process through pair programming, collective ownership and a process that avoids long working hours.  Change supported through regular system releases.  Maintaining simplicity through constant refactoring of code. 451/18/2023 Influential XP practices  Extreme programming has a technical focus and is not easy to integrate with management practice in most organizations.  Consequently, while agile development uses practices from XP, the method as originally defined is not widely used.  Key practices ▪ User stories for specification ▪ Refactoring ▪ Test-first development ▪ Pair programming 461/18/2023 User stories for requirements  In XP, a customer or user is part of the XP team and is responsible for making decisions on requirements.  User requirements are expressed as user stories or scenarios.  These are written on cards and the development team break them down into implementation tasks. These tasks are the basis of schedule and cost estimates.  The customer chooses the stories for inclusion in the next release based on their priorities and the schedule estimates. 471/18/2023 A ‘prescribing medication’ story 481/18/2023 Examples of task cards for prescribing medication 491/18/2023 Refactoring  Conventional wisdom in software engineering is to design for change. It is worth spending time and effort anticipating changes as this reduces costs later in the life cycle.  XP, however, maintains that this is not worthwhile as changes cannot be reliably anticipated.  Rather, it proposes constant code improvement (refactoring) to make changes easier when they have to be implemented. 501/18/2023 Refactoring  Programming team look for possible software improvements and make these improvements even where there is no immediate need for them.  This improves the understandability of the software and so reduces the need for documentation.  Changes are easier to make because the code is well- structured and clear.  However, some changes requires architecture refactoring and this is much more expensive. 511/18/2023 Examples of refactoring  Re-organization of a class hierarchy to remove duplicate code.  Tidying up and renaming attributes and methods to make them easier to understand.  The replacement of inline code with calls to methods that have been included in a program library. 521/18/2023 Test-first development  Testing is central to XP and XP has developed an approach where the program is tested after every change has been made.  XP testing features: ▪ Test-first development. ▪ Incremental test development from scenarios. ▪ User involvement in test development and validation. ▪ Automated test harnesses are used to run all component tests each time that a new release is built. 531/18/2023 Test-driven development  Writing tests before code clarifies the requirements to be implemented.  Tests are written as programs rather than data so that they can be executed automatically. The test includes a check that it has executed correctly. ▪ Usually relies on a testing framework such as Junit.  All previous and new tests are run automatically when new functionality is added, thus checking that the new functionality has not introduced errors. 541/18/2023 Customer involvement  The role of the customer in the testing process is to help develop acceptance tests for the stories that are to be implemented in the next release of the system.  The customer who is part of the team writes tests as development proceeds. All new code is therefore validated to ensure that it is what the customer needs.  However, people adopting the customer role have limited time available and so cannot work full-time with the development team. They may feel that providing the requirements was enough of a contribution and so may be reluctant to get involved in the testing process. 551/18/2023 Test case description for dose checking 561/18/2023 Test automation  Test automation means that tests are written as executable components before the task is implemented ▪ These testing components should be stand-alone, should simulate the submission of input to be tested and should check that the result meets the output specification. An automated test framework (e.g. Junit) is a system that makes it easy to write executable tests and submit a set of tests for execution.  As testing is automated, there is always a set of tests that can be quickly and easily executed ▪ Whenever any functionality is added to the system, the tests can be run and problems that the new code has introduced can be caught immediately. 571/18/2023 Problems with test-first development  Programmers prefer programming to testing and sometimes they take short cuts when writing tests. For example, they may write incomplete tests that do not check for all possible exceptions that may occur.  Some tests can be very difficult to write incrementally. For example, in a complex user interface, it is often difficult to write unit tests for the code that implements the ‘display logic’ and workflow between screens.  It difficult to judge the completeness of a set of tests. Although you may have a lot of system tests, your test set may not provide complete coverage. 581/18/2023 Pair programming  Pair programming involves programmers working in pairs, developing code together.  This helps develop common ownership of code and spreads knowledge across the team.  It serves as an informal review process as each line of code is looked at by more than 1 person.  It encourages refactoring as the whole team can benefit from improving the system code. 591/18/2023 Pair programming  In pair programming, programmers sit together at the same computer to develop the software.  Pairs are created dynamically so that all team members work with each other during the development process.  The sharing of knowledge that happens during pair programming is very important as it reduces the overall risks to a project when team members leave.  Pair programming is not necessarily inefficient and there is some evidence that suggests that a pair working together is more efficient than 2 programmers working separately. 601/18/2023 Agile project management 611/18/2023 Agile project management  The principal responsibility of software project managers is to manage the project so that the software is delivered on time and within the planned budget for the project.  The standard approach to project management is plan- driven. Managers draw up a plan for the project showing what should be delivered, when it should be delivered and who will work on the development of the project deliverables.  Agile project management requires a different approach, which is adapted to incremental development and the practices used in agile methods. 621/18/2023 Scaling agile methods 631/18/2023 Scaling agile methods  Agile methods have proved to be successful for small and medium sized projects that can be developed by a small co-located team.  It is sometimes argued that the success of these methods comes because of improved communications which is possible when everyone is working together.  Scaling up agile methods involves changing these to cope with larger, longer projects where there are multiple development teams, perhaps working in different locations. 641/18/2023 Scaling out and scaling up  ‘Scaling up’ is concerned with using agile methods for developing large software systems that cannot be developed by a small team.  ‘Scaling out’ is concerned with how agile methods can be introduced across a large organization with many years of software development experience.  When scaling agile methods it is importaant to maintain agile fundamentals: ▪ Flexible planning, frequent system releases, continuous integration, test-driven development and good team communications. 651/18/2023 Practical problems with agile methods  The informality of agile development is incompatible with the legal approach to contract definition that is commonly used in large companies.  Agile methods are most appropriate for new software development rather than software maintenance. Yet the majority of software costs in large companies come from maintaining their existing software systems.  Agile methods are designed for small co-located teams yet much software development now involves worldwide distributed teams. 661/18/2023 Contractual issues  Most software contracts for custom systems are based around a specification, which sets out what has to be implemented by the system developer for the system customer.  However, this precludes interleaving specification and development as is the norm in agile development.  A contract that pays for developer time rather than functionality is required. ▪ However, this is seen as a high risk my many legal departments because what has to be delivered cannot be guaranteed. 671/18/2023 Agile methods and software maintenance  Most organizations spend more on maintaining existing software than they do on new software development. So, if agile methods are to be successful, they have to support maintenance as well as original development.  Two key issues: ▪ Are systems that are developed using an agile approach maintainable, given the emphasis in the development process of minimizing formal documentation? ▪ Can agile methods be used effectively for evolving a system in response to customer change requests?  Problems may arise if original development team cannot be maintained. 681/18/2023 Agile maintenance  Key problems are: ▪ Lack of product documentation ▪ Keeping customers involved in the development process ▪ Maintaining the continuity of the development team  Agile development relies on the development team knowing and understanding what has to be done.  For long-lifetime systems, this is a real problem as the original developers will not always work on the system. 691/18/2023 Agile and plan-driven methods  Most projects include elements of plan-driven and agile processes. Deciding on the balance depends on: ▪ Is it important to have a very detailed specification and design before moving to implementation? If so, you probably need to use a plan-driven approach. ▪ Is an incremental delivery strategy, where you deliver the software to customers and get rapid feedback from them, realistic? If so, consider using agile methods. ▪ How large is the system that is being developed? Agile methods are most effective when the system can be developed with a small co-located team who can communicate informally. This may not be possible for large systems that require larger development teams so a plan-driven approach may have to be used. 701/18/2023 Agile principles and organizational practice Principle Practice Customer involvement This depends on having a customer who is willing and able to spend time with the development team and who can represent all system stakeholders. Often, customer representatives have other demands on their time and cannot play a full part in the software development. Where there are external stakeholders, such as regulators, it is difficult to represent their views to the agile team. Embrace change Prioritizing changes can be extremely difficult, especially in systems for which there are many stakeholders. Typically, each stakeholder gives different priorities to different changes. Incremental delivery Rapid iterations and short-term planning for development does not always fit in with the longer-term planning cycles of business planning and marketing. Marketing managers may need to know what product features several months in advance to prepare an effective marketing campaign. 711/18/2023 Agile principles and organizational practice Principle Practice Maintain simplicity Under pressure from delivery schedules, team members may not have time to carry out desirable system simplifications. People not process Individual team members may not have suitable personalities for the intense involvement that is typical of agile methods, and therefore may not interact well with other team members. 721/18/2023 Agile and plan-based factors 731/18/2023 System issues  How large is the system being developed? ▪ Agile methods are most effective a relatively small co-located team who can communicate informally.  What type of system is being developed? ▪ Systems that require a lot of analysis before implementation need a fairly detailed design to carry out this analysis.  What is the expected system lifetime? ▪ Long-lifetime systems require documentation to communicate the intentions of the system developers to the support team.  Is the system subject to external regulation? ▪ If a system is regulated you will probably be required to produce detailed documentation as part of the system safety case. 741/18/2023 People and teams  How good are the designers and programmers in the development team? ▪ It is sometimes argued that agile methods require higher skill levels than plan-based approaches in which programmers simply translate a detailed design into code.  How is the development team organized? ▪ Design documents may be required if the team is dsitributed.  What support technologies are available? ▪ IDE support for visualisation and program analysis is essential if design documentation is not available. 751/18/2023 Organizational issues  Traditional engineering organizations have a culture of plan-based development, as this is the norm in engineering.  Is it standard organizational practice to develop a detailed system specification?  Will customer representatives be available to provide feedback of system increments?  Can informal agile development fit into the organizational culture of detailed documentation? 761/18/2023 Agile methods for large systems  Large systems are usually collections of separate, communicating systems, where separate teams develop each system. Frequently, these teams are working in different places, sometimes in different time zones.  Large systems are ‘brownfield systems’, that is they include and interact with a number of existing systems. Many of the system requirements are concerned with this interaction and so don’t really lend themselves to flexibility and incremental development.  Where several systems are integrated to create a system, a significant fraction of the development is concerned with system configuration rather than original code development. 771/18/2023 Large system development  Large systems and their development processes are often constrained by external rules and regulations limiting the way that they can be developed.  Large systems have a long procurement and development time. It is difficult to maintain coherent teams who know about the system over that period as, inevitably, people move on to other jobs and projects.  Large systems usually have a diverse set of stakeholders. It is practically impossible to involve all of these different stakeholders in the development process. 781/18/2023 Factors in large systems 791/18/2023 IBM’s agility at scale model 801/18/2023 Scaling up to large systems  A completely incremental approach to requirements engineering is impossible.  There cannot be a single product owner or customer representative.  For large systems development, it is not possible to focus only on the code of the system.  Cross-team communication mechanisms have to be designed and used.  Continuous integration is practically impossible. However, it is essential to maintain frequent system builds and regular releases of the system. 811/18/2023 Multi-team Scrum  Role replication ▪ Each team has a Product Owner for their work component and ScrumMaster.  Product architects ▪ Each team chooses a product architect and these architects collaborate to design and evolve the overall system architecture.  Release alignment ▪ The dates of product releases from each team are aligned so that a demonstrable and complete system is produced.  Scrum of Scrums ▪ There is a daily Scrum of Scrums where representatives from each team meet to discuss progressand plan work to be done. 821/18/2023 Agile methods across organizations  Project managers who do not have experience of agile methods may be reluctant to accept the risk of a new approach.  Large organizations often have quality procedures and standards that all projects are expected to follow and, because of their bureaucratic nature, these are likely to be incompatible with agile methods.  Agile methods seem to work best when team members have a relatively high skill level. However, within large organizations, there are likely to be a wide range of skills and abilities.  There may be cultural resistance to agile methods, especially in those organizations that have a long history of using conventional systems engineering processes. 831/18/2023 Problems with agile methods  It can be difficult to keep the interest of customers / users who are involved in the process.  Team members may be unsuited to the intense involvement that characterizes agile methods.  Prioritizing changes can be difficult where there are multiple stakeholders.  Maintaining simplicity requires extra work.  Contracts may be a problem as with other approaches to iterative development.  Because of their focus on small, tightly-integrated teams, there are problems in scaling agile methods to large systems.  Less emphasis on documentation - harder to maintain when you get a new team for maintenance 84Chapter 3 Agile software development Key points  Agile methods are incremental development methods that focus on rapid software development, frequent releases of the software, reducing process overheads by minimizing documentation and producing high-quality code.  Agile development practices include ▪ User stories for system specification ▪ Frequent releases of the software, ▪ Continuous software improvement ▪ Test-first development ▪ Customer participation in the development team. 851/18/2023 Key points  Scrum is an agile method that provides a project management framework. ▪ It is centred round a set of sprints, which are fixed time periods when a system increment is developed.  Many practical development methods are a mixture of plan-based and agile development.  Scaling agile methods for large systems is difficult. ▪ Large systems need up-front design and some documentation and organizational practice may conflict with the informality of agile approaches. 861/18/2023","libVersion":"0.2.2","langs":""}